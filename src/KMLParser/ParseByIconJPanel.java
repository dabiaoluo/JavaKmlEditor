/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ParseByIconJPanel.java
 *
 * Created on Aug 23, 2010, 11:56:30 PM
 */

package KMLParser;

import de.micromata.opengis.kml.v_2_2_0.Kml;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.HashSet;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;


/**
 *
 * @author admin
 */
public class ParseByIconJPanel extends javax.swing.JPanel {
    protected KML_StyleManager kmlStyleManager;
    protected Kml kml;
    protected File srcFile;

    /** Creates new form ParseByIconJPanel */
    public ParseByIconJPanel() {
        initComponents();
        kmlStyleManager = null;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        IconHrefJList = new javax.swing.JList();
        SaveKMLjButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        IconHrefJList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                IconHrefJListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(IconHrefJList);

        SaveKMLjButton.setText("Save to another KML File");
        SaveKMLjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveKMLjButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("Available Icons:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(SaveKMLjButton))
                    .addComponent(jLabel1))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 325, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(SaveKMLjButton)
                        .addGap(168, 168, 168))))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void SaveKMLjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveKMLjButtonActionPerformed

        // TODO add your handling code here:
        Object[] selectedObjs = this.IconHrefJList.getSelectedValues();
        if (selectedObjs.length < 1) {
            JOptionPane.showMessageDialog(this, "Select unless one Icon Style", "Error", JOptionPane.WARNING_MESSAGE);
            return;
        }

        HashSet<String> iconHRefList = new HashSet<String>();
        String iconHRef;
        for (int i = 0; i < selectedObjs.length; i++) {
            iconHRef = (String) selectedObjs[i];
            iconHRefList.add(iconHRef);
        }

        JFileChooser fc = new JFileChooser();
        fc.addChoosableFileFilter(new KMLFilter());
        fc.setCurrentDirectory(this.srcFile);
        if (fc.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            File dstFile = fc.getSelectedFile();
            if(dstFile.equals(srcFile)) {
                JOptionPane.showMessageDialog(this, "For safety reason, it is not possible to modify the currently open file.\nPlease select another file name", "Error", JOptionPane.WARNING_MESSAGE);
                return;
            }

            Kml dstKml = KML_ParseByIconHRef.parseKML(kml, iconHRefList);
            this.IconHrefJList.setEnabled(false);
            this.SaveKMLjButton.setEnabled(false);
            try {
                dstKml.marshal(dstFile);
                JOptionPane.showMessageDialog(this, dstFile.getName() + ": File saved", "Success", JOptionPane.INFORMATION_MESSAGE);
            } catch (FileNotFoundException ex) {
                JOptionPane.showMessageDialog(this, dstFile.getName() + ": " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
            this.IconHrefJList.setEnabled(true);
            this.SaveKMLjButton.setEnabled(true);
        }
    }//GEN-LAST:event_SaveKMLjButtonActionPerformed

    private void IconHrefJListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_IconHrefJListValueChanged
        // TODO add your handling code here:
        if(this.IconHrefJList.isSelectionEmpty()) {
            this.SaveKMLjButton.setEnabled(false);
        } else {
            this.SaveKMLjButton.setEnabled(true);
        }
    }//GEN-LAST:event_IconHrefJListValueChanged


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList IconHrefJList;
    private javax.swing.JButton SaveKMLjButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    public void setKMLStyleManager(KML_StyleManager kmlStyleManager) {
        this.kmlStyleManager = kmlStyleManager;
        this.IconHrefJList.setCellRenderer(new KML_IconRenderer(this.kmlStyleManager));
    }

    public void setKml(Kml kml, File srcFile) {
        this.kml = kml;
        this.srcFile = srcFile;
        
//        HashSet<String> iconHRef = KML_GetDataByIconHRef.getDataKml(kml);
/*
        String hRef;
        ArrayList<KML_Icon> iconList = new ArrayList<KML_Icon>();
        for(Iterator<String> it = iconHRef.iterator(); it.hasNext();) {
            hRef = it.next();
            iconList.add(new KML_Icon(hRef));
        }*/
//        this.IconHrefJList.setListData(iconHRef.toArray());
        this.IconHrefJList.setListData(this.kmlStyleManager.getIconHRefList().toArray());
        this.SaveKMLjButton.setEnabled(false);
    }
}
