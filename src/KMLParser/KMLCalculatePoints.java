/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * KMLCalculatePoints.java
 *
 * Created on Sep 29, 2010, 2:40:01 PM
 */

package KMLParser;

import de.micromata.opengis.kml.v_2_2_0.Coordinate;
import de.micromata.opengis.kml.v_2_2_0.Feature;
import de.micromata.opengis.kml.v_2_2_0.Folder;
import de.micromata.opengis.kml.v_2_2_0.Geometry;
import de.micromata.opengis.kml.v_2_2_0.Kml;
import de.micromata.opengis.kml.v_2_2_0.LineString;
import de.micromata.opengis.kml.v_2_2_0.Placemark;
import de.micromata.opengis.kml.v_2_2_0.Point;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeNode;
import javax.swing.tree.TreePath;
import javax.swing.tree.TreeSelectionModel;

/**
 *
 * @author admin
 */
public class KMLCalculatePoints extends javax.swing.JPanel {
    protected KML_StyleManager kmlStyleManager;
    protected TreePath[] lastTreePathSelection = null;
    protected File srcFile = null;
    protected Kml kml;
    protected Placemark selectedPoint = null;
    protected Placemark selectedLineString = null;
    protected TreeNode selectedPointParentTreeNode = null;
    protected TreeNode selectedLineStringParentTreeNode = null;

    protected Placemark setPoint = null;
    protected Placemark setLineString = null;
    protected TreeNode setParentTreeNode = null;


    /** Creates new form KMLCalculatePoints */
    public KMLCalculatePoints() {
        initComponents();
        this.setPointjButton.setVisible(false);
        this.StartFromjComboBox.setSelectedIndex(0);
        this.ReadFromCSVjButton.setVisible(false);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        kmljTree = new javax.swing.JTree();
        jScrollPane2 = new javax.swing.JScrollPane();
        PointKMjTable = new javax.swing.JTable();
        SelectedPathjLabel = new javax.swing.JLabel();
        StartFromjLabel = new javax.swing.JLabel();
        StartFromjComboBox = new javax.swing.JComboBox();
        StartingPointjLabel = new javax.swing.JLabel();
        StartingKMjLabel = new javax.swing.JLabel();
        StartingKMjTextField = new javax.swing.JTextField();
        ReadFromCSVjButton = new javax.swing.JButton();
        CreatePointsjButton = new javax.swing.JButton();
        ReversePathjButton = new javax.swing.JButton();
        setPathjButton = new javax.swing.JButton();
        setPointjButton = new javax.swing.JButton();
        SavejButton = new javax.swing.JButton();
        SaveAsjButton = new javax.swing.JButton();

        setPreferredSize(new java.awt.Dimension(1011, 535));

        kmljTree.setEditable(true);
        kmljTree.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                kmljTreeValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(kmljTree);

        PointKMjTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "KM", "Name"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Float.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane2.setViewportView(PointKMjTable);
        PointKMjTable.getColumnModel().getColumn(0).setMinWidth(30);

        SelectedPathjLabel.setText("Selected Path: none");

        StartFromjLabel.setText("Start from:");

        StartFromjComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Path Beginning", "Point" }));
        StartFromjComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StartFromjComboBoxActionPerformed(evt);
            }
        });

        StartingPointjLabel.setText("Starting Point: none");

        StartingKMjLabel.setText("Starting KM:");

        ReadFromCSVjButton.setText("Read from a CSV File");

        CreatePointsjButton.setText("Create Points");
        CreatePointsjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CreatePointsjButtonActionPerformed(evt);
            }
        });

        ReversePathjButton.setText("Reverse Path");

        setPathjButton.setText("Set Path");
        setPathjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setPathjButtonActionPerformed(evt);
            }
        });

        setPointjButton.setText("Set Point");
        setPointjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setPointjButtonActionPerformed(evt);
            }
        });

        SavejButton.setText("Save");
        SavejButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SavejButtonActionPerformed(evt);
            }
        });

        SaveAsjButton.setText("Save As...");
        SaveAsjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveAsjButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 312, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(StartingKMjLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(StartingKMjTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(StartingPointjLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 289, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(setPointjButton))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(SelectedPathjLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 289, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(StartFromjLabel)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(StartFromjComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGap(41, 41, 41)
                                    .addComponent(setPathjButton)))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 405, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(46, 46, 46)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(SaveAsjButton, javax.swing.GroupLayout.DEFAULT_SIZE, 199, Short.MAX_VALUE)
                            .addComponent(SavejButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 199, Short.MAX_VALUE)
                            .addComponent(ReadFromCSVjButton, javax.swing.GroupLayout.DEFAULT_SIZE, 199, Short.MAX_VALUE)
                            .addComponent(CreatePointsjButton, javax.swing.GroupLayout.DEFAULT_SIZE, 199, Short.MAX_VALUE)
                            .addComponent(ReversePathjButton, javax.swing.GroupLayout.DEFAULT_SIZE, 199, Short.MAX_VALUE))))
                .addGap(21, 21, 21))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(SelectedPathjLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(StartFromjLabel)
                                    .addComponent(StartFromjComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(StartingPointjLabel))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(setPathjButton)
                                    .addComponent(ReversePathjButton))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(setPointjButton)
                                    .addComponent(CreatePointsjButton))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(StartingKMjLabel)
                            .addComponent(StartingKMjTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(ReadFromCSVjButton)
                                .addGap(233, 233, 233)
                                .addComponent(SavejButton)
                                .addGap(18, 18, 18)
                                .addComponent(SaveAsjButton))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 374, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(25, 25, 25))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void kmljTreeValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_kmljTreeValueChanged
        // TODO add your handling code here:
        TreePath[] treePathSelection = this.kmljTree.getSelectionPaths();

        Feature feature;

        this.selectedPoint = null;
        boolean selectedPointOK = false;
        this.selectedLineString = null;
        boolean selectedLineStringOK = false;
        TreePath treePathSelected;
        if(treePathSelection != null) {
            for(int i = 0; i < treePathSelection.length; i++) {
                treePathSelected = treePathSelection[i];
                Object obj = treePathSelected.getLastPathComponent();
                if(obj instanceof DefaultMutableTreeNode ){
                    DefaultMutableTreeNode iNode = (DefaultMutableTreeNode) obj;
                     KMLtreeNode nodeKml = (KMLtreeNode)iNode.getUserObject();
                     feature = nodeKml.getFeature();

                     if(feature instanceof Placemark) {
                         Placemark placemark = (Placemark) feature;
                         Geometry geometry = placemark.getGeometry();
                         if(geometry instanceof Point) {
                             Point point = (Point) geometry;
                             if(selectedPoint == null) {
                                 selectedPoint = placemark;
                                 this.selectedPointParentTreeNode = iNode.getParent();
                                 selectedPointOK = true;
                             } else {
                                 selectedPointOK = false;
                             }
                         } else if (geometry instanceof LineString) {
                             LineString lineString = (LineString) geometry;
                             if(selectedLineString == null) {
                                 selectedLineString = placemark;
                                 this.selectedLineStringParentTreeNode = iNode.getParent();
                                 selectedLineStringOK = true;
                             } else {
                                 selectedLineStringOK = false;
                             }
                         }
                     }
                }
            }
        }
        if(!selectedPointOK) {
            this.selectedPointParentTreeNode = null;
            this.selectedPoint = null;
        }
        if (!selectedLineStringOK) {
            this.selectedLineStringParentTreeNode = null;
            this.selectedLineString = null;
        }
    }//GEN-LAST:event_kmljTreeValueChanged

    private void setPathjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setPathjButtonActionPerformed
        // TODO add your handling code here:
        if(this.selectedLineString != null) {
            this.setLineString = this.selectedLineString;
            this.setParentTreeNode = this.selectedLineStringParentTreeNode;
            this.SelectedPathjLabel.setText("Selected Path: " + this.selectedLineString.getName());
            this.setPoint = null;
            if(this.StartFromjComboBox.getSelectedIndex() == 0) { // Path Beginning
                this.StartingPointjLabel.setText("Selected Point: Path Beginning");
            } else {
                this.StartingPointjLabel.setText("Selected Point: none");
            }
        }
    }//GEN-LAST:event_setPathjButtonActionPerformed

    private void setPointjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setPointjButtonActionPerformed
        // TODO add your handling code here:
        if(this.selectedPoint != null && this.setParentTreeNode.equals(this.selectedPointParentTreeNode)) {
            this.setPoint = this.selectedPoint;
            this.StartingPointjLabel.setText("Selected Point: " + this.selectedPoint.getName());
        }
    }//GEN-LAST:event_setPointjButtonActionPerformed

    private void CreatePointsjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CreatePointsjButtonActionPerformed
        // TODO add your handling code here:
        String placemarkStyleMap = "";
        if(this.setLineString != null) {
            LineString sLineString = (LineString) this.setLineString.getGeometry();
            Coordinate cStart;
            if(this.StartFromjComboBox.getSelectedIndex() == 0) { // Path beggining
                cStart = sLineString.getCoordinates().get(0);
                if(!this.kmlStyleManager.iconHRefList.isEmpty()) {
                    placemarkStyleMap = this.kmlStyleManager.iconHRefList.iterator().next();
                }
            } else {
                if(this.setPoint != null) {
                    cStart = ((Point)(this.setPoint.getGeometry())).getCoordinates().get(0);
                    placemarkStyleMap = this.setPoint.getStyleUrl();
                } else {
                    return;
                }
            }
            double startingKM = 0;
            try {
                startingKM = Double.parseDouble(this.StartingKMjTextField.getText());
            } catch(NumberFormatException e) {
                return;
            }

            List<Double> placemarkDistanceList = new ArrayList<Double>();
            List<String> placemarkNameList = new ArrayList<String>();
            List<Placemark> placemarkList = null;
            Object obj;
            for(int row = 0; row < this.PointKMjTable.getRowCount(); row++) {
               obj = this.PointKMjTable.getValueAt(row, 0);
               if(obj != null) {
                   double distance = Double.parseDouble(obj.toString());
                   obj = this.PointKMjTable.getValueAt(row, 1);
                   String name;
                   if(obj != null) {
                       name = (String) obj;
                   } else {
                       name = "No name";
                   }
                   placemarkDistanceList.add(distance);
                   placemarkNameList.add(name);

               }
            }
            if(!placemarkDistanceList.isEmpty()) {
                //if(placemarkStyleMap.startsWith("#")) {
                //    placemarkStyleMap = placemarkStyleMap.substring(1);
                //}
                placemarkList = CoordinateCalculator.calculatePlacemark(sLineString, cStart, startingKM, placemarkDistanceList, placemarkNameList, placemarkStyleMap);
                if(placemarkList != null && !placemarkList.isEmpty()) {
                    DefaultMutableTreeNode dmtn = (DefaultMutableTreeNode)this.setParentTreeNode;
                    KMLtreeNode nodeKml = (KMLtreeNode)dmtn.getUserObject();
                    Feature feature = nodeKml.getFeature();
                    if(feature instanceof Folder) {
                        List<Feature> featureList;
                        Folder folder = (Folder)feature;
                        featureList = folder.getFeature();
                        featureList.addAll(placemarkList);
                        folder.setFeature(featureList);
                        DefaultTreeModel treeModel = (DefaultTreeModel)this.kmljTree.getModel();
                        for(Iterator<Placemark> it = placemarkList.iterator(); it.hasNext();){
                            Placemark placemarkNode = it.next();
                            DefaultMutableTreeNode newNode = new DefaultMutableTreeNode(new KMLtreeNode(placemarkNode.getName(), placemarkNode, null));
                            treeModel.insertNodeInto(newNode, dmtn, dmtn.getChildCount());
                        }
                        this.kmljTree.repaint();
                    } else {
                        return;
                    }
                }
            }
        }
    }//GEN-LAST:event_CreatePointsjButtonActionPerformed

    private void StartFromjComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StartFromjComboBoxActionPerformed
        // TODO add your handling code here:
        this.setPoint = null;
        if(this.StartFromjComboBox.getSelectedIndex() == 0) { // Path Beginning
            this.setPointjButton.setVisible(false);
            if(this.setLineString != null) {
                this.StartingPointjLabel.setText("Selected Point: Path Beginning");
            } else {
                this.StartingPointjLabel.setText("Selected Point: none");
            }
        } else {
            this.setPointjButton.setVisible(true);
            this.StartingPointjLabel.setText("Selected Point: none");
        }
    }//GEN-LAST:event_StartFromjComboBoxActionPerformed

    private void SavejButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SavejButtonActionPerformed
        // TODO add your handling code here:
        // TODO add your handling code here:
        if(JOptionPane.showConfirmDialog(this, "Would you like to overwrite " + this.srcFile.getName(), "Save KML", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE)
                == JOptionPane.YES_OPTION) {
            try {
                this.kml.marshal(this.srcFile);
                JOptionPane.showMessageDialog(this, srcFile.getName() + ": File saved", "Success", JOptionPane.INFORMATION_MESSAGE);
            } catch (FileNotFoundException ex) {
                 JOptionPane.showMessageDialog(this, srcFile.getName() + ": " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_SavejButtonActionPerformed

    private void SaveAsjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveAsjButtonActionPerformed
        // TODO add your handling code here:
        JFileChooser fc = new JFileChooser();
        fc.addChoosableFileFilter(new KMLFilter());
        fc.setCurrentDirectory(this.srcFile);
        if (fc.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            File dstFile = fc.getSelectedFile();
            try {
                this.kml.marshal(dstFile);
                JOptionPane.showMessageDialog(this, dstFile.getName() + ": File saved", "Success", JOptionPane.INFORMATION_MESSAGE);
            } catch (FileNotFoundException ex) {
                 JOptionPane.showMessageDialog(this, dstFile.getName() + ": " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }

        }
    }//GEN-LAST:event_SaveAsjButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CreatePointsjButton;
    private javax.swing.JTable PointKMjTable;
    private javax.swing.JButton ReadFromCSVjButton;
    private javax.swing.JButton ReversePathjButton;
    private javax.swing.JButton SaveAsjButton;
    private javax.swing.JButton SavejButton;
    private javax.swing.JLabel SelectedPathjLabel;
    private javax.swing.JComboBox StartFromjComboBox;
    private javax.swing.JLabel StartFromjLabel;
    private javax.swing.JLabel StartingKMjLabel;
    private javax.swing.JTextField StartingKMjTextField;
    private javax.swing.JLabel StartingPointjLabel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTree kmljTree;
    private javax.swing.JButton setPathjButton;
    private javax.swing.JButton setPointjButton;
    // End of variables declaration//GEN-END:variables

    void setKML(Kml kml, KML_StyleManager kmlStyleManager, File srcFile) {
        this.srcFile = srcFile;
        this.kml = kml;
        this.kmlStyleManager = kmlStyleManager;
        this.kmljTree.setModel(new DefaultTreeModel(KML_Tree.processKML(kml)));
        this.kmljTree.getSelectionModel().setSelectionMode(TreeSelectionModel.DISCONTIGUOUS_TREE_SELECTION);
        this.kmljTree.setCellRenderer(new kmljTreeRender(kmlStyleManager));
    }
}
