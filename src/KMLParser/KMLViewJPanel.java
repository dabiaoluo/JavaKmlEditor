/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * KMLViewJPanel.java
 *
 * Created on Aug 29, 2010, 6:47:36 PM
 */

package KMLParser;

import de.micromata.opengis.kml.v_2_2_0.Document;
import de.micromata.opengis.kml.v_2_2_0.Feature;
import de.micromata.opengis.kml.v_2_2_0.Folder;
import de.micromata.opengis.kml.v_2_2_0.Geometry;
import de.micromata.opengis.kml.v_2_2_0.Kml;
import de.micromata.opengis.kml.v_2_2_0.LineString;
import de.micromata.opengis.kml.v_2_2_0.Placemark;
import de.micromata.opengis.kml.v_2_2_0.Point;
import de.micromata.opengis.kml.v_2_2_0.Style;
import de.micromata.opengis.kml.v_2_2_0.StyleMap;
import java.awt.Color;
import java.awt.Component;
import java.io.File;
import java.io.FileNotFoundException;
import java.lang.reflect.Array;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTree;
import javax.swing.ListModel;
import javax.swing.ListSelectionModel;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeCellRenderer;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeModel;
import javax.swing.tree.TreeNode;
import javax.swing.tree.TreePath;
import javax.swing.tree.TreeSelectionModel;

/**
 *
 * @author admin
 */


class kmljTreeRender extends DefaultTreeCellRenderer {
    protected KML_StyleManager kmlStyleManager;
    public kmljTreeRender(KML_StyleManager kmlStyleManager) {
        this.kmlStyleManager = kmlStyleManager;
    }

    @Override
    public Component getTreeCellRendererComponent(JTree tree, Object value, boolean sel,
            boolean expanded, boolean leaf, int row, boolean hasFocus) {
        super.getTreeCellRendererComponent(tree, value, sel,expanded, leaf, row, hasFocus);
        DefaultMutableTreeNode node = (DefaultMutableTreeNode) value;
        KMLtreeNode kmlTreeNode = (KMLtreeNode) node.getUserObject();
        Feature feature = kmlTreeNode.getFeature();
        if (leaf) {
            ImageIcon imageIcon = null;
            if (feature instanceof Placemark) {
                imageIcon = this.kmlStyleManager.getImageIcon((Placemark)feature);
                this.setIcon(imageIcon);
            }
        }
        setText(feature.getName());
        return this;
    }

}

public class KMLViewJPanel extends javax.swing.JPanel implements TreeSelectionListener, DocumentListener {
    protected KML_StyleManager kmlStyleManager;
    protected Array styleListArray;
    protected boolean avoidProcessSelection = false;
    protected TreePath[] lastTreePathSelection = null;
    protected File srcFile = null;
    protected Kml kml;

    /** Creates new form KMLViewJPanel */
    public KMLViewJPanel() {
        initComponents();
        this.kmljTree.setModel(new DefaultTreeModel(new DefaultMutableTreeNode("")));
        this.descriptionjTextArea.getDocument().addDocumentListener(this);
        this.NamejTextField.getDocument().addDocumentListener(this);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        kmljTree = new javax.swing.JTree();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        descriptionjTextArea = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        iconStylejList = new javax.swing.JList();
        jScrollPane4 = new javax.swing.JScrollPane();
        lineStringStylejList = new javax.swing.JList();
        jLabel2 = new javax.swing.JLabel();
        NamejTextField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        FolderRecursivityjCheckBox = new javax.swing.JCheckBox();
        MoveUpjButton = new javax.swing.JButton();
        MoveDownjButton = new javax.swing.JButton();
        saveFilejButton = new javax.swing.JButton();
        SaveAsjButton = new javax.swing.JButton();

        kmljTree.setEditable(true);
        jScrollPane1.setViewportView(kmljTree);

        jLabel1.setText("Description:");

        descriptionjTextArea.setColumns(20);
        descriptionjTextArea.setRows(5);
        jScrollPane2.setViewportView(descriptionjTextArea);

        iconStylejList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                iconStylejListValueChanged(evt);
            }
        });
        jScrollPane3.setViewportView(iconStylejList);

        lineStringStylejList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                lineStringStylejListValueChanged(evt);
            }
        });
        jScrollPane4.setViewportView(lineStringStylejList);

        jLabel2.setText("Name:");

        jLabel3.setText("Placemark Icon Style:");

        jLabel4.setText("Path Line Style:");

        FolderRecursivityjCheckBox.setText("Apply style changes to all subfolder (not recommended)");

        MoveUpjButton.setText("▲");
        MoveUpjButton.setEnabled(false);
        MoveUpjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MoveUpjButtonActionPerformed(evt);
            }
        });

        MoveDownjButton.setText("▼");
        MoveDownjButton.setEnabled(false);
        MoveDownjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MoveDownjButtonActionPerformed(evt);
            }
        });

        saveFilejButton.setText("Save");
        saveFilejButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveFilejButtonActionPerformed(evt);
            }
        });

        SaveAsjButton.setText("Save As...");
        SaveAsjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveAsjButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 312, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jLabel1)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 344, Short.MAX_VALUE)
                        .addComponent(NamejTextField))
                    .addComponent(FolderRecursivityjCheckBox)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(saveFilejButton, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(102, 102, 102)
                        .addComponent(SaveAsjButton, javax.swing.GroupLayout.DEFAULT_SIZE, 121, Short.MAX_VALUE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(MoveDownjButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(MoveUpjButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jLabel3)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 299, Short.MAX_VALUE))
                    .addComponent(jLabel4))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 513, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(NamejTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 37, Short.MAX_VALUE)
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(FolderRecursivityjCheckBox)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(MoveUpjButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(MoveDownjButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(saveFilejButton, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(SaveAsjButton, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void lineStringStylejListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_lineStringStylejListValueChanged
        // TODO add your handling code here:
        if(!this.avoidProcessSelection) { 
            this.iconStylejList.ensureIndexIsVisible(this.iconStylejList.getSelectedIndex());
            this.lineStringStyleChanged();
            this.kmljTree.repaint();
        }
    }//GEN-LAST:event_lineStringStylejListValueChanged

    private void iconStylejListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_iconStylejListValueChanged
        // TODO add your handling code here:
        if(!this.avoidProcessSelection) {
            this.iconStylejList.ensureIndexIsVisible(this.iconStylejList.getSelectedIndex());
            this.iconStyleChanged();
            this.kmljTree.repaint();
        }
    }//GEN-LAST:event_iconStylejListValueChanged

    private void removeSelectedNodes(DefaultMutableTreeNode parentNode, TreePath[] SelectedNodes) {
        for(int i = 0; i < SelectedNodes.length; i++) {
            parentNode.remove((DefaultMutableTreeNode)SelectedNodes[i].getLastPathComponent());
        }
    }

    private void insertSelectedNodes(DefaultTreeModel treeModel, DefaultMutableTreeNode parentNode, int index, TreePath[] SelectedNodes) {
        for(int i = 0; i < SelectedNodes.length; i++) {
            treeModel.insertNodeInto((DefaultMutableTreeNode)SelectedNodes[i].getLastPathComponent(), parentNode, index + i);
        }
    }

    private void updateKMLStructure(DefaultMutableTreeNode parentNode) {
        DefaultMutableTreeNode node;
        List<Feature> featureList = new ArrayList<Feature>();
        Feature feature;
        for(Enumeration e = parentNode.children(); e.hasMoreElements();) {
            node = (DefaultMutableTreeNode) e.nextElement();
            feature = ((KMLtreeNode)node.getUserObject()).getFeature();
            featureList.add(feature);
        }
        feature = ((KMLtreeNode)parentNode.getUserObject()).getFeature();
        if(feature instanceof Document) {
            Document document = (Document) feature;
            document.setFeature(featureList);
        } else if(feature instanceof Folder) {
            Folder folder = (Folder) feature;
            folder.setFeature(featureList);
        }
    }


    private void MoveUpjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MoveUpjButtonActionPerformed
        // TODO add your handling code here:

        DefaultMutableTreeNode firstNode = (DefaultMutableTreeNode)this.lastTreePathSelection[0].getLastPathComponent();
        DefaultMutableTreeNode parentNode = (DefaultMutableTreeNode)this.lastTreePathSelection[0].getParentPath().getLastPathComponent();
        DefaultMutableTreeNode previousNode = firstNode.getPreviousSibling();
        DefaultTreeModel treeModel = (DefaultTreeModel)this.kmljTree.getModel();

        //removeSelectedNodes(parentNode, this.lastTreePathSelection);
        int index;
        if(previousNode != null) {
            index = parentNode.getIndex(previousNode);
        } else {
            index = 0;
        }
        insertSelectedNodes(treeModel, parentNode, index, this.lastTreePathSelection);
        TreePath[] tmpTreePathArray = lastTreePathSelection;
        treeModel.reload(parentNode);
        this.kmljTree.setSelectionPaths(tmpTreePathArray);

        this.updateKMLStructure(parentNode);

    }//GEN-LAST:event_MoveUpjButtonActionPerformed

    private void MoveDownjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MoveDownjButtonActionPerformed
        // TODO add your handling code here:
        DefaultMutableTreeNode lastNode = (DefaultMutableTreeNode)this.lastTreePathSelection[lastTreePathSelection.length-1].getLastPathComponent();
        DefaultMutableTreeNode parentNode = (DefaultMutableTreeNode)this.lastTreePathSelection[lastTreePathSelection.length-1].getParentPath().getLastPathComponent();
        DefaultMutableTreeNode nextNode = lastNode.getNextSibling();
        DefaultTreeModel treeModel = (DefaultTreeModel)this.kmljTree.getModel();

        removeSelectedNodes(parentNode, this.lastTreePathSelection);
        int index;
        if(nextNode != null) {
            index = parentNode.getIndex(nextNode);
        } else {
            index = parentNode.getChildCount()-1;
        }
        insertSelectedNodes(treeModel, parentNode, index+1, this.lastTreePathSelection);
        TreePath[] tmpTreePathArray = lastTreePathSelection;
        treeModel.reload(parentNode);
        this.kmljTree.setSelectionPaths(tmpTreePathArray);

        this.updateKMLStructure(parentNode);

    }//GEN-LAST:event_MoveDownjButtonActionPerformed

    private void saveFilejButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveFilejButtonActionPerformed
        // TODO add your handling code here:
        if(JOptionPane.showConfirmDialog(this, "Would you like to overwrite " + this.srcFile.getName(), "Save KML", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE)
                == JOptionPane.YES_OPTION) {
            try {
                this.kml.marshal(this.srcFile);
                JOptionPane.showMessageDialog(this, srcFile.getName() + ": File saved", "Success", JOptionPane.INFORMATION_MESSAGE);
            } catch (FileNotFoundException ex) {
                 JOptionPane.showMessageDialog(this, srcFile.getName() + ": " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_saveFilejButtonActionPerformed

    private void SaveAsjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveAsjButtonActionPerformed
        JFileChooser fc = new JFileChooser();
        fc.addChoosableFileFilter(new KMLFilter());
        fc.setCurrentDirectory(this.srcFile);
        if (fc.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            File dstFile = fc.getSelectedFile();
            try {
                this.kml.marshal(dstFile);
                JOptionPane.showMessageDialog(this, dstFile.getName() + ": File saved", "Success", JOptionPane.INFORMATION_MESSAGE);
            } catch (FileNotFoundException ex) {
                 JOptionPane.showMessageDialog(this, dstFile.getName() + ": " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
            
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_SaveAsjButtonActionPerformed

    protected List<Feature> convertTreePathToFeatureList(TreePath[] treePathSelection) {
        TreePath treePathSelected;
        List<Feature> featureList = new ArrayList<Feature>();
        Feature feature;
        for(int i = 0; i < treePathSelection.length; i++) {
            treePathSelected = treePathSelection[i];
            Object obj = treePathSelected.getLastPathComponent();
            if(obj instanceof DefaultMutableTreeNode ){
                DefaultMutableTreeNode iNode = (DefaultMutableTreeNode) obj;
                 KMLtreeNode nodeKml = (KMLtreeNode)iNode.getUserObject();
                 feature = nodeKml.getFeature();
                 featureList.add(feature);
            }
        }
        return featureList;
    }

    protected void nameValueChanged() {
        if(!this.avoidProcessSelection) {
            this.nameChanged();
            this.kmljTree.repaint();
        }
    }

    protected void descriptionValueChanged() {
        if(!this.avoidProcessSelection) {
            this.descriptionChanged();
        }
    }

    public void insertUpdate(DocumentEvent e) {
        if(e.getDocument().equals(this.descriptionjTextArea.getDocument())) {
            this.descriptionValueChanged();
        } else if(e.getDocument().equals(this.NamejTextField.getDocument())) {
            this.nameValueChanged();
        }
    }

    public void removeUpdate(DocumentEvent e) {
        if(e.getDocument().equals(this.descriptionjTextArea.getDocument())) {
            this.descriptionValueChanged();
        } else if(e.getDocument().equals(this.NamejTextField.getDocument())) {
            this.nameValueChanged();
        }
    }

    public void changedUpdate(DocumentEvent e) {
        if(e.getDocument().equals(this.descriptionjTextArea.getDocument())) {
            this.descriptionValueChanged();
        } else if(e.getDocument().equals(this.NamejTextField.getDocument())) {
            this.nameValueChanged();
        }
    }

    protected void nameChanged() {
        if(this.lastTreePathSelection != null) {
            if(this.lastTreePathSelection.length == 1) {
                List<Feature> featureList = convertTreePathToFeatureList(this.lastTreePathSelection);
                KML_StyleReplace.processFeatureList(featureList, null, null, null, this.NamejTextField.getText(), false);
            }
        }
    }

    protected void descriptionChanged() {
        if(this.lastTreePathSelection != null) {
            for(int i = 0; i < this.lastTreePathSelection.length; i++) {
                List<Feature> featureList = convertTreePathToFeatureList(this.lastTreePathSelection);
                KML_StyleReplace.processFeatureList(featureList, null, null, this.descriptionjTextArea.getText(), null, false);
            }
        }
    }
    
    protected void iconStyleChanged() {
        if(this.lastTreePathSelection != null) {
            String hRef = (String) this.iconStylejList.getSelectedValue();
            StyleMap iconStyleMap = this.kmlStyleManager.getFirstStyleMapByIconHRef(hRef);
            if(iconStyleMap != null) {
                List<Feature> featureList = convertTreePathToFeatureList(this.lastTreePathSelection);
                KML_StyleReplace.processFeatureList(featureList, iconStyleMap, null, null, null, this.FolderRecursivityjCheckBox.isSelected());
            }
        }
    }

    protected void lineStringStyleChanged() {
        if(this.lastTreePathSelection != null) {
            String colorString = (String) this.lineStringStylejList.getSelectedValue();
            StyleMap lineStringStyleMap = this.kmlStyleManager.getFirstStyleMapByLineStringColor(colorString);
            if(lineStringStyleMap != null) {
                List<Feature> featureList = convertTreePathToFeatureList(this.lastTreePathSelection);
                KML_StyleReplace.processFeatureList(featureList, null, lineStringStyleMap, null, null, this.FolderRecursivityjCheckBox.isSelected());
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox FolderRecursivityjCheckBox;
    private javax.swing.JButton MoveDownjButton;
    private javax.swing.JButton MoveUpjButton;
    private javax.swing.JTextField NamejTextField;
    private javax.swing.JButton SaveAsjButton;
    private javax.swing.JTextArea descriptionjTextArea;
    private javax.swing.JList iconStylejList;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTree kmljTree;
    private javax.swing.JList lineStringStylejList;
    private javax.swing.JButton saveFilejButton;
    // End of variables declaration//GEN-END:variables

    public void setKML(Kml kml, KML_StyleManager kmlStyleManager, File srcFile) {
        this.srcFile = srcFile;
        this.kml = kml;
        this.kmljTree.setModel(new DefaultTreeModel(KML_Tree.processKML(kml)));
        this.kmljTree.getSelectionModel().setSelectionMode(TreeSelectionModel.DISCONTIGUOUS_TREE_SELECTION);
        this.kmljTree.addTreeSelectionListener(this);
        this.kmlStyleManager = kmlStyleManager;
        this.kmljTree.setCellRenderer(new kmljTreeRender(kmlStyleManager));

        this.iconStylejList.setListData(this.kmlStyleManager.getIconHRefList().toArray());
        this.iconStylejList.setCellRenderer(new KML_IconRenderer(this.kmlStyleManager));
        this.iconStylejList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

        this.lineStringStylejList.setListData(this.kmlStyleManager.getLineStringColorList().toArray());
        this.lineStringStylejList.setCellRenderer(new KML_LineStringRenderer(kmlStyleManager));
        this.lineStringStylejList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
    }

    public void valueChanged(TreeSelectionEvent e) {
        Feature feature;
        TreePath[] treePathSelection = this.kmljTree.getSelectionPaths();
        TreePath treePathSelected;
        String descriptionSelected = null;
        String iconHRefSelected = null;
        String lineStringColorSelected = null;
        boolean showiconStylejList = false;
        boolean showlineStringStylejList = false;

        this.avoidProcessSelection = true;

        this.NamejTextField.setText("");

        Feature parentFeature = null;
        boolean leafIsMovable = false;

        if(treePathSelection != null) {
            for(int i = 0; i < treePathSelection.length; i++) {
                treePathSelected = treePathSelection[i];
                Object obj = treePathSelected.getLastPathComponent();
                if(obj instanceof DefaultMutableTreeNode ){
                    DefaultMutableTreeNode iNode = (DefaultMutableTreeNode) obj;
                     KMLtreeNode nodeKml = (KMLtreeNode)iNode.getUserObject();
                     feature = nodeKml.getFeature();

                     if(treePathSelection.length == 1) {
                         this.NamejTextField.setText(feature.getName());
                     }

                     if(i == 0) {
                         descriptionSelected = feature.getDescription();
                     } else {
                         if(descriptionSelected != null && !descriptionSelected.equals(feature.getDescription())) {
                             descriptionSelected = null;
                         }
                     }

                     if(feature instanceof Placemark) {
                         Placemark placemark = (Placemark) feature;
                         Style style = this.kmlStyleManager.getStyle(placemark);
                         Geometry geometry = placemark.getGeometry();
                         if(geometry instanceof Point) {
                             showiconStylejList = true;
                             if(style != null && style.getIconStyle() != null) {
                                 if(i == 0) {
                                     iconHRefSelected = style.getIconStyle().getIcon().getHref();
                                     lineStringColorSelected = null;
                                 } else {
                                     if(lineStringColorSelected == null) {
                                         if (iconHRefSelected != null && iconHRefSelected.equals(style.getIconStyle().getIcon().getHref())) {
                                         } else {
                                             iconHRefSelected = null;
                                         }
                                     } else {
                                         iconHRefSelected = null;
                                         lineStringColorSelected = null;
                                     }
                                 }
                             } else {
                                 if(i == 0) {
                                     iconHRefSelected = null;
                                     lineStringColorSelected = null;
                                 }
                             }

                         } else if (geometry instanceof LineString) {
                             showlineStringStylejList = true;
                             if(style != null && style.getLineStyle() != null) {
                                 if(i == 0) {
                                     iconHRefSelected = null;
                                     lineStringColorSelected = style.getLineStyle().getColor();
                                 } else {
                                     if(iconHRefSelected == null) {
                                         if (lineStringColorSelected != null && lineStringColorSelected.equals(style.getLineStyle().getColor())) {
                                         } else {
                                             lineStringColorSelected = null;
                                         }
                                     } else {
                                         iconHRefSelected = null;
                                         lineStringColorSelected = null;
                                     }
                                 }
                             } else {
                                 if(i == 0) {
                                     iconHRefSelected = null;
                                     lineStringColorSelected = null;
                                 }
                             }
                         }
                     }

                     TreeNode parentTreeNode = iNode.getParent();
                     if(parentTreeNode != null) {
                         if(parentTreeNode instanceof DefaultMutableTreeNode) {
                             DefaultMutableTreeNode dmn = (DefaultMutableTreeNode)parentTreeNode;
                             Object tmpObj = dmn.getUserObject();
                             if(tmpObj instanceof KMLtreeNode) {
                                 Feature pFeature = ((KMLtreeNode)tmpObj).getFeature();
                                 if(parentFeature == null) {
                                    parentFeature = pFeature;
                                    leafIsMovable = true;
                                 } else {
                                     if(!parentFeature.equals(pFeature)) {
                                         leafIsMovable = false;
                                     }
                                 }
                             }
                         }
                    } else {
                         leafIsMovable = false;
                    }
                }
            }
        }

        this.MoveDownjButton.setEnabled(leafIsMovable);
        this.MoveUpjButton.setEnabled(leafIsMovable);

        if(descriptionSelected != null) {
            this.descriptionjTextArea.setText(descriptionSelected);
        } else {
            this.descriptionjTextArea.setText("");
        }
        

        if(iconHRefSelected != null) {
            ListModel model = this.iconStylejList.getModel();
            for(int i = 0; i < model.getSize(); i++) {
                String hRef = (String) model.getElementAt(i);
                if(hRef.equals(iconHRefSelected)) {
                    this.iconStylejList.setSelectedIndex(i);
                    break;
                }
            }
        } else {
            this.iconStylejList.clearSelection();
        }

        if(lineStringColorSelected != null) {
           // Color selectedColorString = this.kmlStyleManager.getColorFromStyle(lineStringColorSelected);
            ListModel model = this.lineStringStylejList.getModel();
            for(int i = 0; i < model.getSize(); i++) {
                String colorString = (String) model.getElementAt(i);
               // Color color = kmlStyleManager.getColorFromStyle(colorString);
                if(colorString.equals(lineStringColorSelected)) {
                    this.lineStringStylejList.setSelectedIndex(i);
                    break;
                }
            }
        } else {
            this.lineStringStylejList.clearSelection();
        }

        this.lastTreePathSelection = treePathSelection;
        this.avoidProcessSelection = false;

    }
}
