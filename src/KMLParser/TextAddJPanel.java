/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * TextAddJPanel.java
 *
 * Created on Nov 13, 2011, 1:30:32 PM
 */
package KMLParser;

import de.micromata.opengis.kml.v_2_2_0.Feature;
import de.micromata.opengis.kml.v_2_2_0.Folder;
import de.micromata.opengis.kml.v_2_2_0.Geometry;
import de.micromata.opengis.kml.v_2_2_0.Kml;
import de.micromata.opengis.kml.v_2_2_0.LineString;
import de.micromata.opengis.kml.v_2_2_0.Placemark;
import de.micromata.opengis.kml.v_2_2_0.Point;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.Iterator;
import java.util.List;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreePath;
import javax.swing.tree.TreeSelectionModel;

/**
 *
 * @author admin
 */
public class TextAddJPanel extends javax.swing.JPanel {
    protected KML_StyleManager kmlStyleManager;
    protected File srcFile = null;
    protected Kml kml;
    protected Folder selectedFolder = null;
    
    /** Creates new form TextAddJPanel */
    public TextAddJPanel() {
        initComponents();
        this.addTextjButton.setEnabled(false);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        kmljTree = new javax.swing.JTree();
        jLabel2 = new javax.swing.JLabel();
        textjTextField = new javax.swing.JTextField();
        lineStringsjCheckBox = new javax.swing.JCheckBox();
        placemarkjCheckBox = new javax.swing.JCheckBox();
        addTextjButton = new javax.swing.JButton();
        SavejButton = new javax.swing.JButton();
        SaveAsjButton = new javax.swing.JButton();

        kmljTree.setEditable(true);
        kmljTree.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                kmljTreeValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(kmljTree);

        jLabel2.setText("Text:");

        lineStringsjCheckBox.setText("LineStrings");
        lineStringsjCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lineStringsjCheckBoxActionPerformed(evt);
            }
        });

        placemarkjCheckBox.setText("Placemark");

        addTextjButton.setText("Add Text");
        addTextjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addTextjButtonActionPerformed(evt);
            }
        });

        SavejButton.setText("Save");
        SavejButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SavejButtonActionPerformed(evt);
            }
        });

        SaveAsjButton.setText("Save As...");
        SaveAsjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveAsjButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 312, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(textjTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                    .addComponent(lineStringsjCheckBox)
                    .addComponent(placemarkjCheckBox)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(addTextjButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(SavejButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(SaveAsjButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 107, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 402, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(textjTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(31, 31, 31)
                        .addComponent(placemarkjCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lineStringsjCheckBox)
                        .addGap(30, 30, 30)
                        .addComponent(addTextjButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 96, Short.MAX_VALUE)
                        .addComponent(SavejButton)
                        .addGap(18, 18, 18)
                        .addComponent(SaveAsjButton)
                        .addGap(80, 80, 80))))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void lineStringsjCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lineStringsjCheckBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_lineStringsjCheckBoxActionPerformed

    private void kmljTreeValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_kmljTreeValueChanged
        // TODO add your handling code here:
        TreePath[] treePathSelection = this.kmljTree.getSelectionPaths();
        Feature feature;
        TreePath treePathSelected;

        this.selectedFolder = null;
        this.addTextjButton.setEnabled(false);
        
        if(treePathSelection != null) {
            for(int i = 0; i < treePathSelection.length; i++) {
                treePathSelected = treePathSelection[i];
                Object obj = treePathSelected.getLastPathComponent();
                if(obj instanceof DefaultMutableTreeNode ){
                    DefaultMutableTreeNode iNode = (DefaultMutableTreeNode) obj;
                     KMLtreeNode nodeKml = (KMLtreeNode)iNode.getUserObject();
                     feature = nodeKml.getFeature();
                     if(feature instanceof Folder) {
                         this.selectedFolder = (Folder) feature;
                         this.addTextjButton.setEnabled(true);
                     }
                }
            }
        }    
    }//GEN-LAST:event_kmljTreeValueChanged

    private void processFolder(Folder folder) {
        List<Feature> featureList = folder.getFeature();
        for(Iterator<Feature> it=featureList.iterator(); it.hasNext();) {
            Feature feature = it.next();
            this.processFeature(feature);
        }
    }
    
    private void processPlacemark(Placemark placemark) {
        Geometry geometry = placemark.getGeometry();
        
        if(geometry instanceof Point) {
            if(this.placemarkjCheckBox.isSelected()) {
                placemark.setName(this.textjTextField.getText() + placemark.getName());
            }
        } else if (geometry instanceof LineString) {
            if(this.lineStringsjCheckBox.isSelected()) {
                placemark.setName(this.textjTextField.getText() + placemark.getName());
            }
        }
    }
    
    private void processFeature(Feature feature) {
        if (feature instanceof Folder) {
            processFolder((Folder)feature);
        } else if (feature instanceof Placemark) {
            processPlacemark((Placemark) feature);
        }
    }
    
    private void addTextjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addTextjButtonActionPerformed
        // TODO add your handling code here:
        if(this.selectedFolder != null) {
            this.processFolder(selectedFolder);
        }
        this.kmljTree.updateUI();
    }//GEN-LAST:event_addTextjButtonActionPerformed

    private void SavejButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SavejButtonActionPerformed
        // TODO add your handling code here:
        // TODO add your handling code here:
        if(JOptionPane.showConfirmDialog(this, "Would you like to overwrite " + this.srcFile.getName(), "Save KML", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE)
                == JOptionPane.YES_OPTION) {
            try {
                this.kml.marshal(this.srcFile);
                JOptionPane.showMessageDialog(this, srcFile.getName() + ": File saved", "Success", JOptionPane.INFORMATION_MESSAGE);
            } catch (FileNotFoundException ex) {
                JOptionPane.showMessageDialog(this, srcFile.getName() + ": " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
}//GEN-LAST:event_SavejButtonActionPerformed

    private void SaveAsjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveAsjButtonActionPerformed
        // TODO add your handling code here:
        JFileChooser fc = new JFileChooser();
        fc.addChoosableFileFilter(new KMLFilter());
        fc.setCurrentDirectory(this.srcFile);
        if (fc.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            File dstFile = fc.getSelectedFile();
            try {
                this.kml.marshal(dstFile);
                JOptionPane.showMessageDialog(this, dstFile.getName() + ": File saved", "Success", JOptionPane.INFORMATION_MESSAGE);
            } catch (FileNotFoundException ex) {
                JOptionPane.showMessageDialog(this, dstFile.getName() + ": " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
           
        }
}//GEN-LAST:event_SaveAsjButtonActionPerformed

    void setKML(Kml kml, KML_StyleManager kmlStyleManager, File srcFile) {
        this.srcFile = srcFile;
        this.kml = kml;
        this.kmlStyleManager = kmlStyleManager;
        this.kmljTree.setModel(new DefaultTreeModel(KML_Tree.processKML(kml)));
        this.kmljTree.getSelectionModel().setSelectionMode(TreeSelectionModel.DISCONTIGUOUS_TREE_SELECTION);
        this.kmljTree.setCellRenderer(new kmljTreeRender(kmlStyleManager));
    } 
  
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton SaveAsjButton;
    private javax.swing.JButton SavejButton;
    private javax.swing.JButton addTextjButton;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTree kmljTree;
    private javax.swing.JCheckBox lineStringsjCheckBox;
    private javax.swing.JCheckBox placemarkjCheckBox;
    private javax.swing.JTextField textjTextField;
    // End of variables declaration//GEN-END:variables
}
